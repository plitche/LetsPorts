<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- Spring에서 새로 배우는 스타일 -->
<mapper namespace="com.koreait.project.jungho.dao.TrainerClassDao">
	
	<!-- 전체 목록을 뿌려주는 list 쿼리문 -->
	<select id="trainerClassList" resultType="com.koreait.project.jungho.dto.TrainerClassDto">
		SELECT *
        FROM (SELECT M1.*, ROWNUM RN
              FROM (SELECT *
                    FROM MEETING
                      WHERE ON_HIDE = 0
                    ORDER BY MEETING_NO DESC) M1
              ) M2 
               FULL OUTER JOIN USERS U 
              ON M2.USER_NO = U.USER_NO
              FULL OUTER JOIN EXERCISE E
              ON M2.EXERCISE_NO = E.EXERCISE_NO
              FULL OUTER JOIN PHOTO P
              ON M2.meeting_no = P.photo_referer_no
              FULL OUTER JOIN LOCATION1 L1
              ON M2.LOCATION1_NO = L1.LOCATION1_NO
              FULL OUTER JOIN LOCATION2 L2
              ON M2.LOCATION2_NO = L2.LOCATION2_NO
       WHERE RN BETWEEN #{param1} AND #{param2}
	</select>
	<!-- 모든 클래스 갯수 가져오기 -->
	<select id="allClassCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING
	</select>
	
	<!-- 필터링 : 트레이너 리스트만 가져오는 것 -->
	<select id="trainerList" resultType="com.koreait.project.jungho.dto.TrainerClassDto">
		SELECT * 
		FROM (SELECT ROWNUM RN, B1.*
			FROM (SELECT * FROM
						MEETING M1
					FULL OUTER JOIN EXERCISE E1
						ON E1.EXERCISE_NO = M1.EXERCISE_NO
					FULL OUTER JOIN USERS U
						ON M1.USER_NO = U.USER_NO
					FULL OUTER JOIN LOCATION1 L1
						ON M1.LOCATION1_NO = L1.LOCATION1_NO
					FULL OUTER JOIN LOCATION2 L2
						ON M1.LOCATION2_NO = L2.LOCATION2_NO
					FULL OUTER JOIN PHOTO P
						ON M1.MEETING_NO = P.PHOTO_REFERER_NO
						WHERE MEETING_NO IS NOT NULL
						AND USER_SEPARATOR = 1) B1 ) B2
		WHERE B2.RN BETWEEN #{param1} AND #{param2}
	</select>
	<!-- 모든 트레이너 리스트 클래스 갯수 가져오기 -->
	<select id="trainerClassCount" resultType="int">
		SELECT COUNT(*)
		 FROM MEETING M, USERS U
		WHERE M.USER_NO = U.USER_NO
		   AND U.USER_SEPARATOR = 1
	</select>
	
	<!-- 필터링 : 운동메이트(유저) 리스트만 가져오는 것 -->
	<select id="exerciseMateList" resultType="com.koreait.project.jungho.dto.TrainerClassDto">
		SELECT * 
		FROM (SELECT ROWNUM RN, B1.*
			FROM (SELECT * FROM
						MEETING M1
					FULL OUTER JOIN EXERCISE E1
						ON E1.EXERCISE_NO = M1.EXERCISE_NO
					FULL OUTER JOIN USERS U
						ON M1.USER_NO = U.USER_NO
					FULL OUTER JOIN LOCATION1 L1
						ON M1.LOCATION1_NO = L1.LOCATION1_NO
					FULL OUTER JOIN LOCATION2 L2
						ON M1.LOCATION2_NO = L2.LOCATION2_NO
					FULL OUTER JOIN PHOTO P
						ON M1.MEETING_NO = P.PHOTO_REFERER_NO
						WHERE MEETING_NO IS NOT NULL
						AND USER_SEPARATOR = 2) B1 ) B2
		WHERE B2.RN BETWEEN #{param1} AND #{param2}
	</select>
	<!-- 모든 트레이너 리스트 클래스 갯수 가져오기 -->
	<select id="exerciseMateCount" resultType="int">
		SELECT COUNT(*)
		 FROM MEETING M, USERS U
		WHERE M.USER_NO = U.USER_NO
		   AND U.USER_SEPARATOR = 2
	</select>
	
	<select id="classTag" resultType="com.koreait.project.dto.ExerciseDto">
		SELECT EXERCISE_NAME, EXERCISE_NO
		FROM EXERCISE
	</select>
	
	<!-- 클래스의 meeting 테이블에 내용들을 삽입하는 쿼리문 -->
	<insert id="trainerClassInsert" parameterType="com.koreait.project.jungho.dto.MakeTrainerClassDto">
		INSERT INTO MEETING VALUES
		(MEETING_SEQ.NEXTVAL, #{user_no}, #{meeting_max}, #{meeting_min}, #{exercise_no}, SYSDATE, #{start_gather_date}, #{end_gather_date}, #{meeting_date}, #{location1_no}, #{location2_no}, #{meeting_title}, #{content}, 0, null, 0, #{detail_location}, 0)	
	</insert>
	<!-- meeting 테이블 삽입 후 새롭게 생긴 meeting_no 값을 최신화시켜 가져오는 쿼리문 -->
	<select id="findNewMeetingNo" resultType="int" parameterType="int">
		SELECT MAX(MEETING_NO)
		FROM MEETING
		WHERE USER_NO = #{param1}
	</select>
	<!-- 새롭게 생긴 meeting_no을 가져와 material을 추가시키는 쿼리문 -->
	<insert id="materialsInsert">
		INSERT INTO MATERIALS VALUES (MATERIALS_SEQ.NEXTVAL, #{param1}, #{param2}, SYSDATE)
	</insert>
	
	<insert id="insertPhoto">
		INSERT INTO PHOTO VALUES (PHOTO_SEQ.NEXTVAL, 4, #{param1}, #{param2}, #{param3}, SYSDATE, 0)
	</insert>
	
	<update id="updatePhotoTable">
		UPDATE PHOTO
		SET PHOTO_REFERER_SEP = 2,
		PHOTO_REFERER_NO = #{param1}
		WHERE PHOTO_REFERER_NO = #{param2}
		AND PHOTO_REFERER_SEP = 3
	</update>
	
	<!-- 보여주기 페이지를 위해 값 가져가는 쿼리문 -->
	<select id="trainerClassView" parameterType="int" resultType="com.koreait.project.jungho.dto.TrainerClassDto">
		SELECT *
		FROM MEETING M
		   FULL OUTER JOIN LOCATION1 L1
		    	 ON M.LOCATION1_NO = L1.LOCATION1_NO
		   FULL OUTER JOIN LOCATION2 L2
				 ON M.LOCATION2_NO = L2.LOCATION2_NO
			FULL OUTER JOIN EXERCISE E
			 	 ON M.EXERCISE_NO = E.EXERCISE_NO
			FULL OUTER JOIN USERS U
				 ON M.USER_NO = U.USER_NO
			FULL OUTER JOIN PHOTO P
				 ON M.MEETING_NO = P.PHOTO_REFERER_NO
			FULL OUTER JOIN TRAINER_INFO TI
				ON U.USER_NO = TI.USER_NO
		WHERE M.MEETING_NO = #{param1}
	    AND P.PHOTO_REFERER_SEP = 4
	</select>
	
	<select id="trainerClassInfo" parameterType="int" resultType="com.koreait.project.jungho.dto.TrainerClassDto">
		SELECT USER_NO
		FROM MEETING
		WHERE MEETING_NO = #{param1}
	</select>
		
	<!-- materials 테이블에 저장된 내용을 가져가는 쿼리문 -->
	<select id="materialsView" resultType="com.koreait.project.dto.MaterialsDto" parameterType="int">
		SELECT *
		FROM MATERIALS
		WHERE MEETING_NO = #{param1}
	</select>
	
	<!-- user_interest 테이블에서 흥미운동 내용 가져오는 쿼리문 -->
	<select id="interestView" resultType="String" parameterType="int">
		SELECT E.EXERCISE_NAME
		FROM USER_INTEREST UI
			JOIN EXERCISE E
				ON E.EXERCISE_NO = UI.EXERCISE_NO
		WHERE UI.USER_NO = #{param1}
	</select>
	
	<!-- 뷰페이지에 들어왔을때 조회수 증가 -->
	<update id="addhit" parameterType="int">
		UPDATE MEETING
		SET MEETING_HIT = MEETING_HIT + 1
		WHERE MEETING_NO = #{param1}
	</update>
	
	<!-- materials에 있는 데이터(자식데이터) 먼저 삭제하는 쿼리문 -->
	<delete id="materialsDelete" parameterType="int">
		DELETE FROM MATERIALS
		WHERE MEETING_NO = #{param1}
	</delete>
	<!-- 자식데이터 삭제후 -> meeting테이블의 데이터 삭제하는 쿼리문 -->
	<delete id="trainerClassDelete" parameterType="int" >
		DELETE FROM MEETING
		WHERE MEETING_NO = #{param1}
	</delete>
	
	<select id="getTrainerClassUpdate" parameterType="int" resultType="com.koreait.project.jungho.dto.TrainerClassDto">
		SELECT * 
		FROM MEETING M1
					FULL OUTER JOIN EXERCISE E1
						ON E1.EXERCISE_NO = M1.EXERCISE_NO
					FULL OUTER JOIN USERS U
						ON M1.USER_NO = U.USER_NO
					FULL OUTER JOIN LOCATION1 L1
						ON M1.LOCATION1_NO = L1.LOCATION1_NO
					FULL OUTER JOIN LOCATION2 L2
						ON M1.LOCATION2_NO = L2.LOCATION2_NO
					FULL OUTER JOIN PHOTO P
						ON M1.MEETING_NO = P.PHOTO_REFERER_NO
		WHERE MEETING_NO = #{param1}
	</select>
	
	<!-- 트레이너 클래스의 meeting테이블의 내용들을 수정하는 쿼리문 -->
	<update id="trainerClassUpdate" parameterType="com.koreait.project.jungho.dto.MakeTrainerClassDto">
		UPDATE MEETING
		SET MEETING_TITLE = #{meeting_title}, MEETING_DATE = #{meeting_date}, START_GATHER_DATE = #{start_gather_date}, END_GATHER_DATE = #{end_gather_date}, MEETING_MIN = #{meeting_min}, MEETING_MAX = #{meeting_max}, EXERCISE_NO = #{exercise_no}, LOCATION1_NO = #{location1_no}, LOCATION2_NO = #{location2_no}, DETAIL_LOCATION = #{detail_location}, MEETING_CONTENT = #{content}
		WHERE MEETING_NO = #{meeting_no}
	</update>
	<!-- 트레이너 클래스의 materials테이블의 내용들을 수정하는 쿼리문 -->
	<update id="materialsViewUpdate">
		UPDATE MATERIALS
		SET MATERIALS_NAME = #{param1}
		WHERE MEETING_NO = #{param2}
	</update>
	<!-- 트레이너 클래스에 사진을 수정하는 쿼리문 -->
	<update id="updatePhoto">
		UPDATE PHOTO
		SET PHOTO_FILENAME = #{param1}
		WHERE PHOTO_REFERER_NO = #{param2}
	</update>
	
	<!-- VIEW페이지에서 관련클래스 목록 추출하는 쿼리문 -->
	<select id="relatedClass"  resultType="com.koreait.project.jungho.dto.TrainerClassDto">
		SELECT *
		FROM MEETING M
			INNER JOIN USERS U
				ON M.USER_NO = U.USER_NO
			INNER JOIN EXERCISE E
				ON M.EXERCISE_NO = E.EXERCISE_NO
			INNER JOIN PHOTO P
				ON M.MEETING_NO = P.PHOTO_REFERER_NO
			INNER JOIN LOCATION1 L1
				ON M.LOCATION1_NO = L1.LOCATION1_NO
			INNER JOIN LOCATION2 L2
				ON M.LOCATION2_NO = L2.LOCATION2_NO
		WHERE M.USER_NO != #{param1}
	    AND M.EXERCISE_NO = #{param2}
	</select>
	
	
	
	<select id="isApply" resultType="int">
		SELECT COUNT(*)
		FROM MEETING_PARTICIPANTS MP
		WHERE MP.MEETING_NO = #{param1}
		AND MP.USER_NO = #{param2}
	</select>
	
	<insert id="applyClass" >
		INSERT INTO MEETING_PARTICIPANTS VALUES
		(MEETING_PARTICIPANTS_SEQ.NEXTVAL, #{param1}, #{param2}, SYSDATE, 0, NULL)
	</insert>
	
	<select id="nowApplyNum" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM MEETING_PARTICIPANTS
		WHERE MEETING_NO = #{param1}
	</select>
	
	
	
	<!-- 트레이너 클래스 목록 페이지 검색창 쿼리문 -->
	<select id="searchClass" resultType="com.koreait.project.jungho.dto.TrainerClassDto">
	SELECT * 
		FROM (SELECT ROWNUM RN, B1.*
			FROM (SELECT M.MEETING_NO, M.MEETING_TITLE, M.MEETING_DATE, M.MEETING_HIT, E.EXERCISE_NAME, U.USER_NICKNAME, P.PHOTO_FILENAME, L1.LOCATION1_NAME, L2.LOCATION2_NAME, U.PROFILE_PHOTO
					  FROM MEETING M
					INNER JOIN EXERCISE E
						ON E.EXERCISE_NO = M.EXERCISE_NO
					INNER JOIN USERS U
						ON M.USER_NO = U.USER_NO
					INNER JOIN PHOTO P
						ON M.MEETING_NO = P.PHOTO_REFERER_NO
					INNER JOIN LOCATION1 L1
						ON M.LOCATION1_NO = L1.LOCATION1_NO
					INNER JOIN LOCATION2 L2
						ON M.LOCATION2_NO = L2.LOCATION2_NO
						WHERE   MEETING_TITLE LIKE '%'||#{param3}||'%' OR
									EXERCISE_NAME LIKE '%'||#{param3}||'%' OR
									USER_NICKNAME LIKE '%'||#{param3}||'%' ) B1 ) B2
		WHERE RN BETWEEN #{param1} AND #{param2}
	</select>
	<select id="searchClassCount" resultType="int" parameterType="String">
		SELECT COUNT(*)
			FROM MEETING M, EXERCISE E, USERS U
			WHERE M.EXERCISE_NO = E.EXERCISE_NO
			AND M.USER_NO = U.USER_NO
			AND (M.MEETING_TITLE LIKE '%'||#{search_content}||'%'
			OR E.EXERCISE_NAME LIKE '%'||#{search_content}||'%'
			OR U.USER_NICKNAME LIKE '%'||#{search_content}||'%')
	</select>
	<!-- 
		SELECT *
		FROM MEETING M
			INNER JOIN USERS U
				ON M.USER_NO = U.USER_NO
			INNER JOIN EXERCISE E
				ON M.EXERCISE_NO = E.EXERCISE_NO
			INNER JOIN PHOTO P
				ON M.MEETING_NO = P.PHOTO_REFERER_NO
		WHERE M.MEETING_TITLE LIKE '%'||#{param1}||'%' OR
		E.EXERCISE_NAME LIKE '%'||#{param1}||'%'
	 -->
	
	<!-- ▼▼▼▼▼▼▼▼▼▼ 태그들 ▼▼▼▼▼▼▼▼▼▼ -->
	<select id="Tag0" resultType="com.koreait.project.jungho.dto.TrainerClassDto">
	SELECT * 
		FROM (SELECT ROWNUM RN, B1.*
			FROM (SELECT *
					  FROM MEETING M
					FULL OUTER JOIN EXERCISE E
						ON E.EXERCISE_NO = M.EXERCISE_NO
					FULL OUTER JOIN USERS U
						ON M.USER_NO = U.USER_NO
					FULL OUTER JOIN PHOTO P
						ON M.MEETING_NO = P.PHOTO_REFERER_NO
					FULL OUTER JOIN LOCATION1 L1
						ON M.LOCATION1_NO = L1.LOCATION1_NO
					FULL OUTER JOIN LOCATION2 L2
						ON M.LOCATION2_NO = L2.LOCATION2_NO
						WHERE E.EXERCISE_NAME = #{param3} ) B1 ) B2
		WHERE RN BETWEEN #{param1} AND #{param2}
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="족구TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '족구'
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="축구TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '축구'
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="농구TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '농구'
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="볼링TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '볼링'
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="크로스핏TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '크로스핏'
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="스피닝TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '스피닝'
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="댄스TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '댄스'
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="요가TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '요가'
	</select>
	<!-- 운동이름이 족구인 것의 총갯수 -->
	<select id="명상TagCount" resultType="int">
		SELECT COUNT(*)
		FROM MEETING M, EXERCISE E
		WHERE E.EXERCISE_NO = M.EXERCISE_NO
		AND EXERCISE_NAME LIKE '명상'
	</select>

</mapper>